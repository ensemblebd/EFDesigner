<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq" #><#+

// EFDesigner v1.2.6.25
// Copyright (c) 2017-2019 Michael Sawczyn
// https://github.com/msawczyn/EFDesigner


#region Todo_Expose_As_MEF_Attributes_In_Designer

List<String> IdentityBaseTypes = new List<String>(){
	"IdentityRole",
	"IdentityRoleClaim",
	"IdentityUser",
	"IdentityUserClaim",
	"IdentityUserLogin",
	"IdentityUserRole",
	"IdentityUserToken"
};
List<String> IdentityBaseTypesWithoutPrimary = new List<String>(){
	"IdentityUserLogin",
	"IdentityUserRole",
	"IdentityUserToken",
	"IdentityUserLogin"
};
List<String> IdentitySubTypes = new List<String>(){
	"ApplicationRole",
	"ApplicationRoleClaim",
	"ApplicationUser",
	"ApplicationUserClaim",
	"ApplicationUserLogin",
	"ApplicationUserRole",
	"ApplicationUserToken"
};
List<String> IdentitySubTypesDisableModelImpl = new List<String>(){
	"ApplicationDepartment",
	"ApplicationGroup",
	"ApplicationGroupDepartment",
	"ApplicationGroupRole",
	"ApplicationUserGroup"
};

enum EIdentityGenerateStrategy {
	INHERITANCE_ONLY, // Don't output anything except class def
	OVERRIDE_PROPS // output properties as override (may cause issues for some properties, and may demand user to provision default values via Init() partial on derived class)
}
EIdentityGenerateStrategy IdentityGenerateStrategy = EIdentityGenerateStrategy.INHERITANCE_ONLY; // todo:    ModelRoot.IdentityGenerateStrategy - MEF dropdown option at root level

bool isIdentityBase(String name) { // todo:   ModelClass.IsIdentity (exposed property)
   return IdentityBaseTypes.Any(x=> x.EndsWith(name, StringComparison.OrdinalIgnoreCase));
}
bool isIdentityBaseWithoutPK(String name) { // todo:   ModelClass.NoPrimaryKey (exposed property)
   return IdentityBaseTypesWithoutPrimary.Any(x=> x.EndsWith(name, StringComparison.OrdinalIgnoreCase));
}
bool isIdentityModel(String name) { // todo:   ModelClass.IsIdentitySubClass (exposed property)
   return IdentitySubTypes.Any(x=> x.EndsWith(name, StringComparison.OrdinalIgnoreCase));
}
bool shouldDisableModelImpl(String name) { // todo:   ModelClass.DisableModelImpl (exposed property)
	return IdentitySubTypesDisableModelImpl.Any(x=> x.EndsWith(name, StringComparison.OrdinalIgnoreCase));
}
bool shouldForceDefaultConstructorToPublic(String name) { // todo:   ModelClass.DefaultConstructorIsPublic (exposed property)
	return IdentitySubTypesDisableModelImpl.Any(x=> x.EndsWith(name, StringComparison.OrdinalIgnoreCase));
}
bool IsAspNetCoreIdentity() {return true;} // todo:   ModelRoot.IsNetCoreIdentity (exposed property)

String IdentityUserImpl = "ApplicationUser";// todo:   ModelRoot.IdentityUserClass (exposed property)
String IdentityRoleImpl = "ApplicationRole";// todo:   ModelRoot.IdentityRoleClass (exposed property)
String IdentityTKey = "int";// todo:   ModelRoot.IdentityPreferredKeyType (exposed property)

#endregion




void NL()
{
   WriteLine(string.Empty);
}

string[] NonNullableTypes 
{
   get
   { 
      return new[] {
         "Binary",
         "Geography",
         "GeographyCollection",
         "GeographyLineString",
         "GeographyMultiLineString",
         "GeographyMultiPoint",
         "GeographyMultiPolygon",
         "GeographyPoint",
         "GeographyPolygon",
         "Geometry",
         "GeometryCollection",
         "GeometryLineString",
         "GeometryMultiLineString",
         "GeometryMultiPoint",
         "GeometryMultiPolygon",
         "GeometryPoint",
         "GeometryPolygon",
         "String"
      };
   }
}

string[] SpatialTypes 
{
   get
   {
      return new[] {
         "Geography",
         "GeographyCollection",
         "GeographyLineString",
         "GeographyMultiLineString",
         "GeographyMultiPoint",
         "GeographyMultiPolygon",
         "GeographyPoint",
         "GeographyPolygon",
         "Geometry",
         "GeometryCollection",
         "GeometryLineString",
         "GeometryMultiLineString",
         "GeometryMultiPoint",
         "GeometryMultiPolygon",
         "GeometryPoint",
         "GeometryPolygon"
      };
   }
}

bool IsNullable(ModelAttribute modelAttribute)
{
   return !modelAttribute.Required &&
          !modelAttribute.IsIdentity &&
          !modelAttribute.IsConcurrencyToken &&
          !NonNullableTypes.Contains(modelAttribute.Type);
}

void Output(string text)
{
   if (text.StartsWith("}"))
      PopIndent();
   WriteLine(text);
   if (text.EndsWith("{"))
      PushIndent("   ");
}

void Output(string template, params object[] items)
{
   string text = string.Format(template, items);
   Output(text);
}

void OutputChopped(IEnumerable<string> segments)
{
   if (!segments.Any())
      return;

   string[] segmentArray = segments.ToArray();
   int indent = segmentArray[0].IndexOf('.');

   if (indent == -1) 
   {
      if (segmentArray.Length > 1)
      {
         segmentArray[0] = $"{segmentArray[0]}.{segmentArray[1]}";
         indent = segmentArray[0].IndexOf('.');
         segmentArray = segmentArray.Where((source, index) => index != 1).ToArray();
      }
   }

   for (int index = 1; index < segmentArray.Length; ++index)
      segmentArray[index] = $"{new string(' ', indent)}.{segmentArray[index]}";

   if (!segmentArray[segmentArray.Length - 1].Trim().EndsWith(";"))
      segmentArray[segmentArray.Length - 1] = segmentArray[segmentArray.Length - 1] + ";";

   foreach (string segment in segmentArray)
      Output(segment);
}

void BeginNamespace(string ns)
{
   if (!string.IsNullOrEmpty(ns))
   {
      Output($"namespace {ns}");
      Output("{");
   }
}

void EndNamespace(string ns)
{
   if (!string.IsNullOrEmpty(ns))
      Output("}");
}

List<string> GetRequiredParameters(ModelClass modelClass, bool? haveDefaults = null)
{
   List<string> requiredParameters = new List<string>();
   
   if (haveDefaults != true)
   {
      requiredParameters.AddRange(modelClass.AllRequiredAttributes
                                            .Where(x => !x.IsIdentity && 
                                                        !x.IsConcurrencyToken && 
                                                         x.SetterVisibility == SetterAccessModifier.Public && 
                                                         string.IsNullOrEmpty(x.InitialValue))
                                            .Select(x => $"{x.FQPrimitiveType} {x.Name.ToLower()}"));

      requiredParameters.AddRange(modelClass.AllRequiredNavigationProperties()
                                            .Select(x => $"{x.ClassType.FullName} {x.PropertyName.ToLower()}"));
   }
   
   if (haveDefaults != false)
   {
      requiredParameters.AddRange(modelClass.AllRequiredAttributes
                                            .Where(x => !x.IsIdentity && 
                                                        !x.IsConcurrencyToken && 
                                                         x.SetterVisibility == SetterAccessModifier.Public &&
                                                        !string.IsNullOrEmpty(x.InitialValue))
                                            .Select(x =>
                                            {
                                               string quote = x.PrimitiveType == "string" ? "\"" : x.PrimitiveType == "char" ? "'" : string.Empty;
                                               string value = FullyQualified(modelClass.ModelRoot, x.InitialValue.Trim('"', '\''));
                                               return $"{x.FQPrimitiveType} {x.Name.ToLower()} = {quote}{value}{quote}";
                                            }));
   }

   return requiredParameters;
}

List<string> GetRequiredParameterNames(ModelClass modelClass)
{
   List<string> requiredParameterNames = modelClass.AllRequiredAttributes
      .Where(x => !x.IsIdentity && !x.IsConcurrencyToken && x.SetterVisibility == SetterAccessModifier.Public && string.IsNullOrEmpty(x.InitialValue))
      .Select(x => x.Name.ToLower())
      .ToList();

   requiredParameterNames.AddRange(modelClass.AllRequiredNavigationProperties()
      .Select(x => x.PropertyName.ToLower()));

   requiredParameterNames.AddRange(modelClass.AllRequiredAttributes
      .Where(x => !x.IsIdentity && !x.IsConcurrencyToken && x.SetterVisibility == SetterAccessModifier.Public && !string.IsNullOrEmpty(x.InitialValue))
      .Select(x => x.Name.ToLower()));

   return requiredParameterNames;
}

void WriteEnum(ModelEnum modelEnum)
{
      Output("using System;");
      NL();

      BeginNamespace(modelEnum.Namespace);

      if (!string.IsNullOrEmpty(modelEnum.Summary))
      {
         Output("/// <summary>");
         Output("/// {0}", modelEnum.Summary);
         Output("/// </summary>");
      }
      if (!string.IsNullOrEmpty(modelEnum.Description))
      {
         Output("/// <remarks>");
         Output("/// {0}", modelEnum.Description);
         Output("/// </remarks>");
      }
         
      if (modelEnum.IsFlags)
      {
         Output("[Flags]");
      }

      if (!string.IsNullOrWhiteSpace(modelEnum.CustomAttributes))
          Output($"[{modelEnum.CustomAttributes.Trim('[',']')}]");

      Output($"public enum {modelEnum.Name} : {modelEnum.ValueType}");
      Output("{");

      ModelEnumValue[] values = modelEnum.Values.ToArray();
      for (int index = 0; index < values.Length; ++index)
      {
         if (!string.IsNullOrEmpty(values[index].Summary))
         {
            Output("/// <summary>");
            Output("/// {0}", values[index].Summary);
            Output("/// </summary>");
         }
         if (!string.IsNullOrEmpty(values[index].Description))
         {
            Output("/// <remarks>");
            Output("/// {0}", values[index].Description);
            Output("/// </remarks>");
         }

         if (!string.IsNullOrWhiteSpace(values[index].CustomAttributes))
             Output($"[{values[index].CustomAttributes.Trim('[',']')}]");

         if (!string.IsNullOrWhiteSpace(values[index].DisplayText))
            Output($"[System.ComponentModel.DataAnnotations.Display(Name=\"{values[index].DisplayText}\")]");

         if (string.IsNullOrEmpty(values[index].Value))
            Output($"{values[index].Name}{(index < values.Length - 1 ? "," : string.Empty)}");
         else
            Output($"{values[index].Name} = {values[index].Value}{(index < values.Length - 1 ? "," : string.Empty)}");
      }
      Output("}");

      EndNamespace(modelEnum.Namespace);
}

void WriteClass(ModelClass modelClass)
{
   bool b_isIdentityBase=isIdentityBase(modelClass.Name);
   bool b_isIdentityModel=isIdentityModel(modelClass.Name);
   bool b_desiresPublicAccess = shouldForceDefaultConstructorToPublic(modelClass.Name);
   
   Output("using System;");
   Output("using System.Collections.Generic;");
   Output("using System.Collections.ObjectModel;");
   Output("using System.ComponentModel;");
   Output("using System.ComponentModel.DataAnnotations;");
   Output("using System.ComponentModel.DataAnnotations.Schema;");
   Output("using System.Linq;");
   Output("using System.Runtime.CompilerServices;");
   if (b_isIdentityBase) {
	  Output("using Microsoft.AspNetCore.Identity;"); // required for drag/drop of Identity class derivations.
   }
   List<string> additionalUsings = GetAdditionalUsingStatementsEF6(modelClass.ModelRoot);
   if (additionalUsings.Any())
      Output(string.Join("\n", additionalUsings));
   NL();

   BeginNamespace(modelClass.Namespace);

   string isAbstract = modelClass.IsAbstract ? "abstract " : string.Empty;

   List<string> bases = new List<string>();
   if (modelClass.Superclass != null) 
      bases.Add(modelClass.Superclass.FullName);
   if (!string.IsNullOrEmpty(modelClass.CustomInterfaces))
      bases.AddRange(modelClass.CustomInterfaces.Split(new[] {','}, StringSplitOptions.RemoveEmptyEntries));
   if (modelClass.ImplementNotify)
      bases.Add("INotifyPropertyChanged");
   string baseClass = bases.Any() ? $" : {string.Join(", ", bases.Select(x => x.Trim()))}" : string.Empty;

   if (!string.IsNullOrEmpty(modelClass.Summary))
   {
      Output("/// <summary>");
      Output("/// {0}", modelClass.Summary);
      Output("/// </summary>");
   }
   if (!string.IsNullOrEmpty(modelClass.Description))
   {
      Output("/// <remarks>");
      Output("/// {0}", modelClass.Description);
      Output("/// </remarks>");
   }

   if (!string.IsNullOrWhiteSpace(modelClass.CustomAttributes))
         Output($"[{modelClass.CustomAttributes.Trim('[',']')}]");

   Output($"public {isAbstract}partial class {modelClass.Name}{baseClass}");
   Output("{");

   if (!b_isIdentityBase || b_isIdentityBase && IdentityGenerateStrategy != EIdentityGenerateStrategy.INHERITANCE_ONLY) {
	   if (!b_isIdentityBase) {
		  WriteConstructor(modelClass, b_isIdentityModel, b_desiresPublicAccess);
	   }
	   WritePersistentProperties(modelClass, b_isIdentityBase);
	   if (!b_isIdentityBase) {
		  WriteCalculatedProperties(modelClass);
		  WritePersistentNavigationProperties(modelClass, true);
		  WriteCalculatedNavigationProperties(modelClass);
		  WriteNotifyPropertyChanged(modelClass);
	   }
	}
   Output("}");

   EndNamespace(modelClass.Namespace);
   NL();
}

string GetFullContainerName(string containerType, string payloadType)
{
   string result = "System.Collections.Generic.HashSet<T>";

   switch (containerType)
   {
      case "HashSet":
         result = "System.Collections.Generic.HashSet<T>";
         break;
      case "LinkedList":
         result = "System.Collections.Generic.LinkedList<T>";
         break;
      case "List":
         result = "System.Collections.Generic.List<T>";
         break;
      case "SortedSet":
         result = "System.Collections.Generic.SortedSet<T>";
         break;
      case "Collection":
         result = "System.Collections.ObjectModel.Collection<T>";
         break;
      case "ObservableCollection":
         result = "System.Collections.ObjectModel.ObservableCollection<T>";
         break;
      case "BindingList":
         result = "System.ComponentModel.BindingList<T>";
         break;
      default:
         result = containerType;
         break;
   }

   if (result.EndsWith("<T>"))
   {
      result = result.Replace("<T>", $"<{payloadType}>");
   }

   return result;
}

void WriteDefaultConstructorBody(ModelClass modelClass)
{
   int lineCount = 0;
   foreach (ModelAttribute modelAttribute in modelClass.Attributes.Where(x => x.SetterVisibility == SetterAccessModifier.Public && 
                                                                              !string.IsNullOrEmpty(x.InitialValue) && 
                                                                              x.InitialValue != "null"))
   {
      string quote = modelAttribute.Type == "String" ? "\"" : modelAttribute.Type == "Char" ? "'" : string.Empty;
      Output($"{modelAttribute.Name} = {quote}{FullyQualified(modelClass.ModelRoot, modelAttribute.InitialValue)}{quote};");
      ++lineCount;
   }

   foreach (NavigationProperty navigationProperty in modelClass.LocalNavigationProperties()
                                                               .Where(x => x.AssociationObject.Persistent &&
                                                                           (x.IsCollection || x.ClassType.IsDependentType) &&
                                                                           !x.ConstructorParameterOnly))
   {
      if (!navigationProperty.IsCollection)
      {
          Output($"{navigationProperty.PropertyName} = new {navigationProperty.ClassType.FullName}(this);");
      }
      else
      {
          string collectionType = GetFullContainerName(navigationProperty.AssociationObject.CollectionClass,
                                                       navigationProperty.ClassType.FullName);
          Output($"{navigationProperty.PropertyName} = new {collectionType}();");
      }
      
      ++lineCount;
   }

   if (lineCount > 0) NL();
   Output("Init();");
}

void WriteConstructor(ModelClass modelClass, bool b_isIdentityModel, bool b_desiresPublicAccess)
{
   Output("partial void Init();");
   NL();

   /***********************************************************************/
   // Default constructor
   /***********************************************************************/

   bool hasRequiredParameters = GetRequiredParameters(modelClass, false).Any();
   string visibility = hasRequiredParameters || modelClass.IsAbstract ? "protected" : "public";
   // Error	CS0310- <T> must be a non-abstract type with a public parameterless constructor in order to use it as parameter in the generic type or method
   if (b_isIdentityModel || b_desiresPublicAccess) visibility = "public";
   
   if (visibility == "public")
   {
      Output("/// <summary>");
      Output("/// Default constructor");
      Output("/// </summary>");
   }
   else if (modelClass.IsAbstract)
   {
      Output("/// <summary>");
      Output("/// Default constructor. Protected due to being abstract.");
      Output("/// </summary>");
   }
   else if (hasRequiredParameters)
   {
      Output("/// <summary>");
      Output("/// Default constructor. Protected due to required properties, but present because EF needs it.");
      Output("/// </summary>");
   }
           
   if (modelClass.Superclass != null)
      Output($"{visibility} {modelClass.Name}(): base()");
   else
      Output($"{visibility} {modelClass.Name}()");
   Output("{");

   WriteDefaultConstructorBody(modelClass);

   Output("}");
   NL();

   /***********************************************************************/
   // Constructor with required parameters (if necessary)
   /***********************************************************************/
   
   if (hasRequiredParameters)
   {
      visibility = modelClass.IsAbstract ? "protected" : "public";

      Output("/// <summary>");
      Output("/// Public constructor with required data");
      Output("/// </summary>");
      WriteConstructorComments(modelClass);
      Output($"{visibility} {modelClass.Name}({string.Join(", ", GetRequiredParameters(modelClass))})");
      Output("{");

      foreach (ModelAttribute requiredAttribute in modelClass.AllRequiredAttributes.Where(x => !x.IsIdentity && !x.IsConcurrencyToken && x.SetterVisibility == SetterAccessModifier.Public))
      {
         if (requiredAttribute.Type == "String")
            Output($"if (string.IsNullOrEmpty({requiredAttribute.Name.ToLower()})) throw new ArgumentNullException(nameof({requiredAttribute.Name.ToLower()}));");
         else if (requiredAttribute.Type.StartsWith("Geo"))
            Output($"if ({requiredAttribute.Name.ToLower()} == null) throw new ArgumentNullException(nameof({requiredAttribute.Name.ToLower()}));");
         Output($"{requiredAttribute.Name} = {requiredAttribute.Name.ToLower()};");
      }

      foreach (ModelAttribute modelAttribute in modelClass.Attributes.Where(x => x.SetterVisibility == SetterAccessModifier.Public &&
                                                                                 !x.Required &&
                                                                                 !string.IsNullOrEmpty(x.InitialValue) && 
                                                                                 x.InitialValue != "null"))
      {
         string quote = modelAttribute.Type == "String" ? "\"" : modelAttribute.Type == "Char" ? "'" : string.Empty;
         Output($"{modelAttribute.Name} = {quote}{FullyQualified(modelClass.ModelRoot, modelAttribute.InitialValue)}{quote};");
      }

      foreach (NavigationProperty requiredNavigationProperty in modelClass.AllRequiredNavigationProperties())
      {
         string parameterName = requiredNavigationProperty.PropertyName.ToLower();
         Output($"if ({parameterName} == null) throw new ArgumentNullException(nameof({parameterName}));");
      
         if (requiredNavigationProperty.IsCollection)
         {
            Output($"{requiredNavigationProperty.PropertyName}.Add({parameterName});");
         }
         else if (requiredNavigationProperty.ConstructorParameterOnly)
         {
            UnidirectionalAssociation association = requiredNavigationProperty.AssociationObject as UnidirectionalAssociation;
            
            if (association.TargetMultiplicity == Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany)
            {
               Output($"{requiredNavigationProperty.PropertyName}.{association.TargetPropertyName}.Add(this);");
            }
            else
            { 
               Output($"{requiredNavigationProperty.PropertyName}.{association.TargetPropertyName} = this;");
            }
         }
         else
            Output($"{requiredNavigationProperty.PropertyName} = {parameterName};");

         NL();
      }

      foreach (NavigationProperty navigationProperty in modelClass.LocalNavigationProperties()
                                                                  .Where(x => x.AssociationObject.Persistent &&
                                                                              (x.IsCollection || x.ClassType.IsDependentType) &&
                                                                              !x.ConstructorParameterOnly))
      {
         if (!navigationProperty.IsCollection)
            Output($"{navigationProperty.PropertyName} = new {navigationProperty.ClassType.FullName}(this);");
         else
         {
            string collectionType = GetFullContainerName(navigationProperty.AssociationObject.CollectionClass,
                                                       navigationProperty.ClassType.FullName);
            Output($"{navigationProperty.PropertyName} = new {collectionType}();");
         }
      }

      Output("Init();");
      Output("}");
      NL();

      if (!modelClass.IsAbstract)
      {
         Output("/// <summary>");
         Output("/// Static create function (for use in LINQ queries, etc.)");
         Output("/// </summary>");
         WriteConstructorComments(modelClass);
         
         string newToken = string.Empty;
         List<string> requiredParameters = GetRequiredParameters(modelClass);
         if (!AllSuperclassesAreNullOrAbstract(modelClass))
         {
            List<string> superclassRequiredParameters = GetRequiredParameters(modelClass.Superclass);
            if (!b_isIdentityModel && !requiredParameters.Except(superclassRequiredParameters).Any())
               newToken = "new " ;
         }
         
         Output($"public static {newToken}{modelClass.Name} Create({string.Join(", ", GetRequiredParameters(modelClass))})");
         Output("{");
         Output($"return new {modelClass.Name}({string.Join(", ", GetRequiredParameterNames(modelClass))});");
         Output("}");
         NL();
      }
   }
}

bool AllSuperclassesAreNullOrAbstract(ModelClass modelClass)
{
   ModelClass superClass = modelClass.Superclass;
   while (superClass != null)
   {
      if (!superClass.IsAbstract) return false;
      superClass = superClass.Superclass;
   }
   return true;
}

void WriteConstructorComments(ModelClass modelClass)
{
   foreach (ModelAttribute requiredAttribute in modelClass.AllRequiredAttributes.Where(x => !x.IsIdentity && !x.IsConcurrencyToken && x.SetterVisibility == SetterAccessModifier.Public))
      Output($@"/// <param name=""{requiredAttribute.Name.ToLower()}"">{requiredAttribute.Summary}</param>");
   
   // TODO: Add comment if available
   foreach (NavigationProperty requiredNavigationProperty in modelClass.AllRequiredNavigationProperties())
      Output($@"/// <param name=""{requiredNavigationProperty.PropertyName.ToLower()}""></param>");
}

string FullyQualified(ModelRoot modelRoot, string typeName)
{
   string[] parts = typeName.Split('.');
   if (parts.Length == 1) return typeName;
   
   string simpleName = parts[0];
   ModelEnum modelEnum = modelRoot.Store.ElementDirectory.AllElements.OfType<ModelEnum>().FirstOrDefault(e => e.Name == simpleName);
   return modelEnum != null ? $"{modelEnum.FullName}.{parts.Last()}" : typeName;
}

void WritePersistentProperties(ModelClass modelClass, bool b_isIdentityBase)
{
   if (!modelClass.Attributes.Any(x => x.Persistent))
      return;

   Output("/*************************************************************************");
   Output(" * Persistent properties");
   Output(" *************************************************************************/");
   NL();

   List<string> segments = new List<string>();

   bool b_attr_hasCustomKeyOverride = modelClass.Attributes.Any(x => x.Persistent && x.CustomAttributes.Contains("Key,"));

   foreach (ModelAttribute modelAttribute in modelClass.Attributes.Where(x => x.Persistent))
   {
	   if (isIdentityBaseWithoutPK(modelClass.Name) && modelAttribute.Name.ToLower() == "id") continue;
	   segments.Clear();

      if (modelAttribute.IsIdentity)
         segments.Add("Identity");
      if (modelAttribute.Required || modelAttribute.IsIdentity)
         segments.Add("Required");
      if (modelAttribute.Indexed)
         segments.Add("Indexed");
      if (modelAttribute.MinLength > 0)
         segments.Add($"Min length = {modelAttribute.MinLength}");
      if (modelAttribute.MaxLength > 0)
         segments.Add($"Max length = {modelAttribute.MaxLength}");
      if (!string.IsNullOrEmpty(modelAttribute.InitialValue))
      {
         string quote = modelAttribute.PrimitiveType == "string" ? "\"" : modelAttribute.PrimitiveType == "char" ? "'" : string.Empty;
         segments.Add($"Default value = {quote}{FullyQualified(modelClass.ModelRoot, modelAttribute.InitialValue)}{quote}");
      }

      string nullable = IsNullable(modelAttribute) ? "?" : string.Empty;

      if (!modelAttribute.IsConcurrencyToken && !modelAttribute.AutoProperty)
      {
         Output($"/// <summary>");
         Output($"/// Backing field for {modelAttribute.Name}");
         Output($"/// </summary>");
         Output($"protected {modelAttribute.FQPrimitiveType}{nullable} _{modelAttribute.Name};");
         Output($"/// <summary>");
         Output($"/// When provided in a partial class, allows value of {modelAttribute.Name} to be changed before setting.");
         Output($"/// </summary>");
         Output($"partial void Set{modelAttribute.Name}({modelAttribute.FQPrimitiveType}{nullable} oldValue, ref {modelAttribute.FQPrimitiveType}{nullable} newValue);");
         Output($"/// <summary>");
         Output($"/// When provided in a partial class, allows value of {modelAttribute.Name} to be changed before returning.");
         Output($"/// </summary>");
         Output($"partial void Get{modelAttribute.Name}(ref {modelAttribute.FQPrimitiveType}{nullable} result);");

         NL();
      }

      if (!string.IsNullOrEmpty(modelAttribute.Summary) || segments.Any())
      {
         Output("/// <summary>");
         if (segments.Any())
            Output($"/// {string.Join(", ", segments)}");
         if (!string.IsNullOrEmpty(modelAttribute.Summary))
            Output("/// {0}", modelAttribute.Summary);
         Output("/// </summary>");
      }
      if (!string.IsNullOrEmpty(modelAttribute.Description))
      {
         Output("/// <remarks>");
         Output("/// {0}", modelAttribute.Description);
         Output("/// </remarks>");
      }

      string setterVisibility = modelAttribute.SetterVisibility == SetterAccessModifier.Protected ? "protected " : 
                                modelAttribute.SetterVisibility == SetterAccessModifier.Internal ? "internal " : 
                                string.Empty;

      GeneratePropertyAnnotations(modelAttribute, b_attr_hasCustomKeyOverride);

	  String overrideText = (b_isIdentityBase)?"override ":"";
	  
      if (!string.IsNullOrWhiteSpace(modelAttribute.CustomAttributes))
            Output($"[{modelAttribute.CustomAttributes.Trim('[',']')}]");

      if (modelAttribute.IsConcurrencyToken || modelAttribute.AutoProperty)
      {
         Output($"public {overrideText}{modelAttribute.FQPrimitiveType}{nullable} {modelAttribute.Name} {{ get; {setterVisibility}set; }}");
      }
      else
      {
         Output($"public {overrideText}{modelAttribute.FQPrimitiveType}{nullable} {modelAttribute.Name}");
         Output("{");
         Output("get");
         Output("{");
         Output($"{modelAttribute.FQPrimitiveType}{nullable} value = _{modelAttribute.Name};");
         Output($"Get{modelAttribute.Name}(ref value);");
         Output($"return (_{modelAttribute.Name} = value);");
         Output("}");
         Output($"{setterVisibility}set");
         Output("{");
         Output($"{modelAttribute.FQPrimitiveType}{nullable} oldValue = _{modelAttribute.Name};");
         Output($"Set{modelAttribute.Name}(oldValue, ref value);");
         Output("if (oldValue != value)");
         Output("{");
         Output($"_{modelAttribute.Name} = value;");
         if (modelClass.ImplementNotify)
            Output("OnPropertyChanged();");
         Output("}");
         Output("}");
         Output("}");
	  }

      NL();
   }

   if (!modelClass.AllAttributes.Any(x => x.IsConcurrencyToken) && 
       (modelClass.Concurrency == ConcurrencyOverride.Optimistic || modelClass.ModelRoot.ConcurrencyDefault == Concurrency.Optimistic))
   {
      Output("/// <summary>");
      Output("/// Concurrency token");
      Output("/// </summary>");
      Output("[Timestamp]");
      Output("public Byte[] Timestamp { get; set; }");
      NL();
   }
}

void GeneratePropertyAnnotations(ModelAttribute modelAttribute, bool b_attr_hasCustomKeyOverride=false, string namePrefix = null)
{
   if (!b_attr_hasCustomKeyOverride && modelAttribute.IsIdentity)               Output("[Key]");
   if (modelAttribute.Required)                 Output("[Required]");
   if (modelAttribute.IsConcurrencyToken)       Output("[ConcurrencyCheck]");
   if (modelAttribute.FQPrimitiveType == "string") 
   {
      if (modelAttribute.MaxLength > 0)
      {
         Output($"[MaxLength({modelAttribute.MaxLength})]");
         Output($"[StringLength({modelAttribute.MaxLength})]");
      }
      if (modelAttribute.ModelClass.ModelRoot.EntityFrameworkVersion != EFVersion.EFCore)
      {
         if (modelAttribute.MinLength > 0)
            Output($"[MinLength({modelAttribute.MinLength})]");
      } 
   }
   if (!string.IsNullOrWhiteSpace(modelAttribute.DisplayText))
      Output($"[Display(Name=\"{modelAttribute.DisplayText}\")]");

}

void WriteCalculatedProperties(ModelClass modelClass)
{
   if (modelClass.Attributes.All(x => x.Persistent))
      return;

   Output("// Calculated properties");
   NL();

   foreach (ModelAttribute calculatedAttribute in modelClass.Attributes.Where(x => !x.Persistent))
   {
      string nullable = IsNullable(calculatedAttribute) ? "?" : string.Empty;

      Output("partial void Get{0}(ref {1}{2} value);", calculatedAttribute.Name, calculatedAttribute.FQPrimitiveType, nullable);
      Output("partial void Set{0}({1}{2} value);", calculatedAttribute.Name, calculatedAttribute.FQPrimitiveType, nullable);

      Output("/// <summary>");
      Output("/// Calculated property");
      if (!string.IsNullOrEmpty(calculatedAttribute.Summary))
         Output("/// {0}", calculatedAttribute.Summary);
      Output("/// </summary>");

      if (!string.IsNullOrEmpty(calculatedAttribute.Description))
      {
         Output("/// <remarks>");
         Output("/// {0}", calculatedAttribute.Description);
         Output("/// </remarks>");
      }

      string setterVisibility = calculatedAttribute.SetterVisibility == SetterAccessModifier.Protected 
                                   ? "protected " 
                                   : calculatedAttribute.SetterVisibility == SetterAccessModifier.Internal ? "internal " : string.Empty;
      string isVirtual = calculatedAttribute.Virtual ? "virtual " : string.Empty;

      if (!string.IsNullOrWhiteSpace(calculatedAttribute.CustomAttributes))
            Output($"[{calculatedAttribute.CustomAttributes.Trim('[',']')}]");
      if (!string.IsNullOrWhiteSpace(calculatedAttribute.DisplayText))
         Output($"[Display(Name=\"{calculatedAttribute.DisplayText}\")]");

      Output($"public {isVirtual}{calculatedAttribute.FQPrimitiveType}{nullable} {calculatedAttribute.Name}");
      Output("{");
      Output($"get {{ {calculatedAttribute.FQPrimitiveType}{nullable} value = default({calculatedAttribute.FQPrimitiveType}{nullable}); Get{calculatedAttribute.Name}(ref value); return value; }}");
      Output($"{setterVisibility}set {{ Set{calculatedAttribute.Name}(value); }}");
      Output("}");
      NL();
   }
}

//string CamelCase(string str)
//{
//   if (str.Length == 0) 
//      return str;
//   return str.Substring(0,1).ToLower() + str.Substring(1);
//}

void WritePersistentNavigationProperties(ModelClass modelClass, bool requireVirtual)
{
   if (!modelClass.LocalNavigationProperties().Any(x => x.AssociationObject.Persistent))
      return;

   Output("/*************************************************************************");
   Output(" * Persistent navigation properties");
   Output(" *************************************************************************/");
   NL();

   foreach (NavigationProperty navigationProperty in modelClass.LocalNavigationProperties()
                                                               .Where(x => x.AssociationObject.Persistent && !x.ConstructorParameterOnly))
   {
      string type = navigationProperty.IsCollection
                        ? $"ICollection<{navigationProperty.ClassType.FullName}>"
                        : navigationProperty.ClassType.FullName;

      if (modelClass.ImplementNotify && !navigationProperty.IsCollection)
      {
         Output($"protected {type} _{navigationProperty.PropertyName};");
         Output($"partial void Set{navigationProperty.PropertyName}({type} oldValue, ref {type} newValue);");
         Output($"partial void Get{navigationProperty.PropertyName}(ref {type} result);");

         NL();
      }

      List<string> comments = new List<string>();
      if (navigationProperty.Required)
         comments.Add("Required");
      string comment = comments.Count > 0 ? string.Join(", ", comments) : string.Empty;
      string _virtual = requireVirtual ? "virtual " : string.Empty;

      if (!string.IsNullOrEmpty(navigationProperty.Summary) || !string.IsNullOrEmpty(comment))
      {
         Output("/// <summary>");
         if (!string.IsNullOrEmpty(comment)) Output("/// {0}", comment);
         if (!string.IsNullOrEmpty(navigationProperty.Summary)) Output("/// {0}", navigationProperty.Summary);
         Output("/// </summary>");
      }
      if (!string.IsNullOrEmpty(navigationProperty.Description))
      {
         Output("/// <remarks>");
         Output("/// {0}", navigationProperty.Description);
         Output("/// </remarks>");
      }

      if (!string.IsNullOrWhiteSpace(navigationProperty.CustomAttributes))
            Output($"[{navigationProperty.CustomAttributes.Trim('[',']')}]");
      if (!string.IsNullOrWhiteSpace(navigationProperty.DisplayText))
         Output($"[Display(Name=\"{navigationProperty.DisplayText}\")]");

      if (!modelClass.ImplementNotify || navigationProperty.IsCollection)
      {
         Output($"public {_virtual}{type} {navigationProperty.PropertyName} {{ get; set; }}");
      }
      else
      {
         Output($"public {type} {navigationProperty.PropertyName}");
         Output("{");
         Output("get");
         Output("{");
         Output($"{type} value = _{navigationProperty.PropertyName};");
         Output($"Get{navigationProperty.PropertyName}(ref value);");
         Output($"return (_{navigationProperty.PropertyName} = value);");
         Output("}");
         Output($"set");
         Output("{");
         Output($"{type} oldValue = _{navigationProperty.PropertyName};");
         Output($"Set{navigationProperty.PropertyName}(oldValue, ref value);");
         Output("if (oldValue != value)");
         Output("{");
         Output($"_{navigationProperty.PropertyName} = value;");
         if (modelClass.ImplementNotify)
            Output("OnPropertyChanged();");
         Output("}");
         Output("}");
         Output("}");
	  }

     NL();
   }
}

void WriteCalculatedNavigationProperties(ModelClass modelClass)
{
   if (modelClass.LocalNavigationProperties().All(x => x.AssociationObject.Persistent))
      return;

   Output("// Calculated navigation properties");
   NL();

   foreach (NavigationProperty navigationProperty in modelClass.LocalNavigationProperties()
                                                               .Where(x => !x.AssociationObject.Persistent && !x.ConstructorParameterOnly))
   {
      string type = navigationProperty.IsCollection
                        ? $"ICollection<{navigationProperty.ClassType.FullName}>"
                        : navigationProperty.ClassType.FullName;

      Output($"partial void Get{navigationProperty.PropertyName}(ref {type} value);");
      Output($"partial void Set{navigationProperty.PropertyName}({type} value);");

      if (!string.IsNullOrEmpty(navigationProperty.Summary))
      {
         Output("/// <summary>");
         Output("/// {0}", navigationProperty.Summary);
         Output("/// </summary>");
      }
      if (!string.IsNullOrEmpty(navigationProperty.Description))
      {
         Output("/// <remarks>");
         Output("/// {0}", navigationProperty.Description);
         Output("/// </remarks>");
      }


      if (!string.IsNullOrWhiteSpace(navigationProperty.CustomAttributes))
            Output($"[{navigationProperty.CustomAttributes.Trim('[',']')}]");
      if (!string.IsNullOrWhiteSpace(navigationProperty.DisplayText))
         Output($"[Display(Name=\"{navigationProperty.DisplayText}\")]");

      Output($"public {type} {navigationProperty.PropertyName}");
      Output("{");
      Output($"get {{ {type} value = null; Get{navigationProperty.PropertyName}(ref value); return value; }}");
      Output($"set {{ Set{navigationProperty.PropertyName}(value); }}");
      Output("}");
      NL();
   }
}

void WriteNotifyPropertyChanged(ModelClass modelClass)
{
   if (!modelClass.ImplementNotify)
      return;

   string modifier = (modelClass.Superclass?.ImplementNotify == true) ? "override" : "virtual";
   Output($"public {modifier} event PropertyChangedEventHandler PropertyChanged;");
   NL();
   Output($"protected {modifier} void OnPropertyChanged([CallerMemberName] string propertyName = null)");
   Output("{");
   Output("PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));");
   Output("}");
   NL();
}

#>
